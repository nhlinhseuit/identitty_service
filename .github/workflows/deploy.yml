name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  DOCKER_IMAGE: nhlinhseuit/identity-service
  DOCKER_TAG: ${{ github.sha }}

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: "21"
          distribution: "zulu"

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build with Maven
        run: mvn clean package -DskipTests

      # - name: Run tests
      #   run: mvn test

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: target/*.jar

  build-and-push-docker:
    name: Build and Push Docker Image
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
            ${{ env.DOCKER_IMAGE }}:latest
          cache-from: type=registry,ref=${{ env.DOCKER_IMAGE }}:latest
          cache-to: type=inline

  deploy-to-ec2:
    name: Deploy to EC2
    needs: build-and-push-docker
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Stop and remove existing container
            sudo docker stop identity-service || true
            sudo docker rm identity-service || true

            # Pull latest image
            sudo docker pull ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

            # Run new container
            sudo docker run -d \
              --name identity-service \
              --network devteria-network \
              -p 8080:8080 \
              -e DBMS_CONNECTION=jdbc:postgresql://postgres:5432/identity_service \
              -e SPRING_PROFILES_ACTIVE=prod \
              --restart unless-stopped \
              ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

            # Clean up old images
            sudo docker image prune -af

      - name: Verify deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Wait for container to start
            sleep 30

            # Check if container is running
            sudo docker ps | grep identity-service

            # Wait for application to be ready with retry logic
            for i in {1..10}; do
              echo "Attempt $i: Checking application health..."
              if curl -f -s http://localhost:8080/actuator/health; then
                echo "Application is healthy!"
                break
              else
                echo "Application not ready yet, waiting 10 seconds..."
                sleep 10
              fi
            done

            # Final health check
            curl -f http://localhost:8080/actuator/health || exit 1
